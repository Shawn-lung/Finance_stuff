import sqlite3
import pandas as pd
import logging
import os
from typing import Dict, Optional

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DBFinancialDataProvider:
    """Provider for financial data from SQLite database instead of using yfinance."""
    
    def __init__(self, db_path: str = "finance_data.db"):
        """Initialize the database data provider.
        
        Args:
            db_path: Path to the SQLite database file
        """
        self.db_path = db_path
        
        # Check if database exists
        if not os.path.exists(db_path):
            logger.warning(f"Database not found at {db_path}. Fallback to yfinance may be needed.")
    
    def get_stock_data(self, stock_id: str) -> Dict:
        """Get financial data for a stock from the database.
        
        Args:
            stock_id: Stock ticker symbol
            
        Returns:
            Dict with financial statement data
        """
        try:
            # Connect to database
            conn = sqlite3.connect(self.db_path)
            
            # Get financial statements
            financial_stmt = pd.read_sql_query(
                "SELECT * FROM financial_statements WHERE stock_id = ?",
                conn,
                params=(stock_id,)
            )
            
            # Get balance sheets
            balance_sheet = pd.read_sql_query(
                "SELECT * FROM balance_sheets WHERE stock_id = ?",
                conn,
                params=(stock_id,)
            )
            
            # Get cash flows
            cash_flow = pd.read_sql_query(
                "SELECT * FROM cash_flows WHERE stock_id = ?",
                conn,
                params=(stock_id,)
            )
            
            # Get stock prices
            price_data = pd.read_sql_query(
                "SELECT * FROM stock_prices WHERE stock_id = ?",
                conn,
                params=(stock_id,)
            )
            
            conn.close()
            
            # Format data to resemble the structure we need
            result = {
                'financial_statement': financial_stmt,
                'balance_sheet': balance_sheet,
                'cash_flow': cash_flow,
                'price_data': price_data
            }
            
            # Add stock_info if available
            try:
                conn = sqlite3.connect(self.db_path)
                stock_info = pd.read_sql_query(
                    "SELECT * FROM stock_info WHERE stock_id = ?",
                    conn,
                    params=(stock_id,)
                )
                conn.close()
                
                if not stock_info.empty:
                    result['stock_info'] = stock_info.iloc[0].to_dict()
            except Exception as e:
                logger.debug(f"Could not get stock info for {stock_id}: {e}")
            
            return result
            
        except Exception as e:
            logger.error(f"Error getting stock data for {stock_id} from database: {e}")
            return {}
    
    def get_formatted_financial_data(self, stock_id: str) -> Dict:
        """Get financial data in a format similar to yfinance output.
        
        Args:
            stock_id: Stock ticker symbol
            
        Returns:
            Dict with financial data in yfinance format
        """
        try:
            raw_data = self.get_stock_data(stock_id)
            
            if not raw_data:
                return {}
            
            # Transform data to yfinance format
            result = {}
            
            # Create a pivot for each financial statement type
            for stmt_type, df in raw_data.items():
                if df.empty or stmt_type == 'price_data' or stmt_type == 'stock_info':
                    continue
                
                # Convert date and type columns
                if 'date' in df.columns and 'type' in df.columns and 'value' in df.columns:
                    # Pivot table: rows=types, columns=dates, values=value
                    pivot = df.pivot(index='type', columns='date', values='value')
                    
                    # Convert to proper yfinance format
                    formatted_name = {
                        'financial_statement': 'income_statement',
                        'balance_sheet': 'balance_sheet',
                        'cash_flow': 'cash_flow'
                    }.get(stmt_type, stmt_type)
                    
                    result[formatted_name] = pivot
                
                elif 'date' in df.columns and 'metric_type' in df.columns and 'value' in df.columns:
                    # Pivot table: rows=metric_types, columns=dates, values=value
                    pivot = df.pivot(index='metric_type', columns='date', values='value')
                    
                    # Convert to proper yfinance format
                    formatted_name = {
                        'financial_statement': 'income_statement',
                        'balance_sheet': 'balance_sheet',
                        'cash_flow': 'cash_flow'
                    }.get(stmt_type, stmt_type)
                    
                    result[formatted_name] = pivot
            
            # Add stock info
            if 'stock_info' in raw_data:
                result['info'] = raw_data['stock_info']
                
                # Add market cap if price_data exists
                if 'price_data' in raw_data and not raw_data['price_data'].empty:
                    price_data = raw_data['price_data']
                    if 'close' in price_data.columns:
                        latest_price = price_data.iloc[-1]['close']
                        if 'stock_info' in raw_data and 'shares_outstanding' in raw_data['stock_info']:
                            shares = raw_data['stock_info']['shares_outstanding']
                            result['info']['marketCap'] = latest_price * shares
            
            return result
            
        except Exception as e:
            logger.error(f"Error formatting financial data for {stock_id}: {e}")
            return {}
    
    def get_market_data(self, stock_id: str) -> Dict:
        """Get market data for a stock from the database.
        
        Args:
            stock_id: Stock ticker symbol
            
        Returns:
            Dict with market data
        """
        try:
            # Connect to database
            conn = sqlite3.connect(self.db_path)
            
            # Get stock info
            stock_info = pd.read_sql_query(
                "SELECT * FROM stock_info WHERE stock_id = ?",
                conn,
                params=(stock_id,)
            )
            
            # Get latest price
            price_data = pd.read_sql_query(
                "SELECT * FROM stock_prices WHERE stock_id = ? ORDER BY date DESC LIMIT 1",
                conn,
                params=(stock_id,)
            )
            
            conn.close()
            
            if stock_info.empty or price_data.empty:
                return {}
            
            # Format market data
            info = stock_info.iloc[0]
            price = price_data.iloc[0]
            
            market_data = {
                'price': float(price['close']),
                'shares_outstanding': float(info['shares_outstanding']) if 'shares_outstanding' in info else None,
                'beta': float(info['beta']) if 'beta' in info else None,
                'source': 'database'
            }
            
            # Calculate market cap if we have shares outstanding
            if market_data['shares_outstanding'] is not None:
                market_data['market_cap'] = market_data['price'] * market_data['shares_outstanding']
            
            return market_data
            
        except Exception as e:
            logger.error(f"Error getting market data for {stock_id} from database: {e}")
            return {}
    
    def get_industry(self, stock_id: str) -> Optional[str]:
        """Get industry classification for a stock.
        
        Args:
            stock_id: Stock ticker symbol
            
        Returns:
            Industry classification string or None if not found
        """
        try:
            conn = sqlite3.connect(self.db_path)
            
            cursor = conn.cursor()
            cursor.execute("SELECT industry FROM stock_info WHERE stock_id = ?", (stock_id,))
            result = cursor.fetchone()
            
            conn.close()
            
            if result:
                return result[0]
            return None
            
        except Exception as e:
            logger.error(f"Error getting industry for {stock_id}: {e}")
            return None
